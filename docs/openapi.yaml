openapi: 3.1.0
info:
  title: Budget Tracking API
  version: 0.0.3
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  summary: Simple API for keeping track of financial transactions
paths:
  /credentials:
    post:
      tags:
        - Credentials
      summary: Create credentials
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  maxLength: 50
                  minLength: 4
                password:
                  type: string
                  maxLength: 50
                  minLength: 8
      responses:
        204:
          description: Credentials created successfully
        400:
          $ref: '#/components/responses/ValidationError'
        500:
          $ref: '#/components/responses/InternalError'
    delete:
      security:
      - basicAuth: []
      tags:
        - Credentials
      summary: Delete credentials
      responses:
        204:
          description: Credentials deleted successfully
        401:
          $ref: '#/components/responses/AuthenticationError'
        500:
          $ref: '#/components/responses/InternalError'
  /transactions:
    post:
      security:
      - basicAuth: []
      tags:
        - Transactions
      summary: Add a new transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        201:
          description: Transactions added
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/AuthenticationError'
        500:
          $ref: '#/components/responses/InternalError'
    get:
      security:
      - basicAuth: []
      tags:
        - Transactions
      summary: Get list of the transactions
      parameters:
        - in: query
          name: category
          description: For filtering. Returns transactions with given category.
          schema:
            $ref: '#/components/schemas/TransactionCategory'
        - in: query
          name: from
          description: For filtering. Returns transactions that occured after given timestamp.
          schema:
            type: string
            format: date-time
        - in: query
          name: to
          description: For filtering. Returns transactions that occured before given timestamp.
          schema:
            type: string
            format: date-time
        - in: query
          name: sort
          description: For sorting. Sorts transactions by the given property.
          schema:
            type: string
            default: timestamp
            enum:
              - category
              - timestamp
        - in: query
          name: order
          description: For sorting. Determines the sorting direction.
          schema:
            type: string
            default: desc
            enum:
              - asc
              - desc
        - in: query
          name: limit
          description: For pagination. Returns the given amount of transactions.
          schema:
            minimum: 1
            type: integer
            default: 10
        - in: query
          name: skip
          description: For pagination. Skips the given amount of transactions.
          schema:
            minimum: 0
            type: integer
            default: 0
      responses:
        200:
          description: List of transactions successfully fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProcessedTransaction'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/AuthenticationError'
        500:
          $ref: '#/components/responses/InternalError'
  /transactions/{transactionId}:
    parameters:
    - in: path
      name: transactionId
      required: true
      schema:
        type: string
        format: uuid
    get:
      security:
      - basicAuth: []
      tags:
        - Transactions
      summary: Get transaction by id
      responses:
        200:
          description: Transaction successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessedTransaction'
        401:
          $ref: '#/components/responses/AuthenticationError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalError'
    put:
      security:
      - basicAuth: []
      tags:
        - Transactions
      summary: Update an existing transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Transaction'
      responses:
        200:
          description: Transaction successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProcessedTransaction'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/AuthenticationError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalError'
    delete:
      security:
      - basicAuth: []
      tags:
        - Transactions
      summary: Delete an existing transaction
      responses:
        204:
          description: Transaction successfully deleted
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/AuthenticationError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalError'
  /reports:
    get:
      summary: Generates a financial report for the given period
      description: If run without any parameters, generates the report from all data. Can be filtered more specifically with parameters.
      security:
        - basicAuth: []
      tags:
        - Reports
      parameters:
        - in: query
          name: category
          schema:
            $ref: '#/components/schemas/TransactionCategory'
          required: false
        - in: query
          name: from
          description: Timestamp to start the report from
          schema:
            type: string
            format: date-time
        - in: query
          name: to
          description: Timestamp to end the report to
          schema:
            type: string
            format: date-time
      responses:
        200:
          description: Report generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  transactions_sum:
                    type: number
                  expenses_sum:
                    type: number
                  incomes_sum:
                    type: number
                  transactions_count:
                    type: number
                  expenses_count:
                    type: number
                  incomes_count:
                    type: number
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/AuthenticationError'
        500:
          $ref: '#/components/responses/InternalError'
  /openapi.yaml:
    get:
      summary: Returns the OpenAPI document
      tags:
        - OpenAPI
      responses:
        200:
          description: Successfully fetched the OpenAPI document
          content:
            application/yaml:
              schema:
                type: object
        500:
          description: Fetching OpenAPI document failed
components:
  schemas:
    TransactionCategory:
          type: string
          enum:
            - "Household & Services"
            - "Food & Drinks"
            - "Transport"
            - "Recreation"
            - "Health"
            - "Other"
    Transaction:
      type: object
      required:
        - category
        - description
        - value
        - timestamp
      properties:
        category:
          $ref: '#/components/schemas/TransactionCategory'
        description:
          type: string
          description: Freely formatted description of the transaction
          maxLength: 200
          minLength: 4
          examples:
            - "Restaurant Paris"
            - "Refund"
        value:
          type: number
          description: Negative number when money was spent, and positive if money has been added to account. Allows maximum of two decimals.
          multipleOf: 0.01
          maximum: 1000000000
          minimum: -1000000000
          format: double
          examples:
            - -54.99
            - 9.99
        timestamp:
          type: string
          format: date-time
          description: When the transaction occurred
    ProcessedTransaction:
      required:
      allOf:
        - $ref: '#/components/schemas/Transaction'
        - type: object
          properties:
            id:
              description: Assigned unique identifier
              type: string
              format: uuid
    ErrorBody:
      type: object
      properties:
        error:
          type: string
          description: Error message
          examples:
            - "Detailed error message"
  responses:
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorBody"
    InternalError:
      description: Internal error occurred
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorBody"
    ValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorBody"
    AuthenticationError:
      description: Authentication error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorBody"
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
